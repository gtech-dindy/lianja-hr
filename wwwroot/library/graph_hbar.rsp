<%@ Language=Recital %>
<html>

<%
private m_libpath
if isPhoneGap()
	m_libpath = "js/library"
elseif isElectron()
	m_libpath = iif(isElectronDebug(), "file:///library", "file:///resources/app.asar/library")
else
	m_libpath = libPath()
endif
? "<head>"
? '<script src="&m_libpath/graphs/RGraph.common.core.js"></script>'
? '<script src="&m_libpath/graphs/RGraph.common.tooltips.js"></script>'
? '<script src="&m_libpath/graphs/RGraph.common.effects.js"></script>'
? '<script src="&m_libpath/graphs/RGraph.common.key.js"></script>'
? '<script src="&m_libpath/graphs/RGraph.hbar.js"></script>'
? "</head>"
%>

<%
set macros on
//--
// graph_hbar.rsp?parameter=value&parameter=value...
//
// parameters
//--
private m_width  = getParameter("width", "720") 
private m_height = getParameter("height", "160") 
private m_id     = getParameter("id", "graphCanvas") 
private m_data   = getParameter("data", "280,200|133,120|45,133") 
private m_labels = getParameter("labels", "Barry,Yvonne,Chris") 
private m_keylabels = getParameter("keylabels", "2010,2011") 
private m_tooltips = getParameter("tooltips", "Barry,Barry,Yvonne,Yvonne,Chris,Chris") 
private m_guttertop = getParameter("guttertop", "25") 
private m_gutterbottom = getParameter("gutterbottom", "25") 
private m_gutterleft = getParameter("gutterleft", "50") 
private m_gutterright = getParameter("gutterright", "60") 
private m_shadow  = getParameter("shadow", "false") 
private m_gradient  = getParameter("gradient", "false") 
private m_gradientstart  = getParameter("gradientstart", "white") 
private m_gradientend  = getParameter("gradientend", "lightblue") 
private m_margin  = getParameter("margin", "3") 
private m_title  = getParameter("title", "Untitled Horizonal Bar Chart") 
private m_titleforecolor  = getParameter("titleforecolor", "gray") 
private m_titlebackcolor  = getParameter("titlebackcolor", "") 
private m_labelsabove  = getParameter("labelsabove", "true") 
private m_margin  = getParameter("margin", "5") 
private m_labelforecolor  = getParameter("labelforecolor", "gray") 
private m_colors  = getParameter("colors", "#77f,lightblue") 
private m_delegate  = getParameter("delegate", "") 
private m_backcolor  = getParameter("backcolor", "#f7f7f7") 
private m_effects  = getParameter("effects", "true") 

// emit javascript code
text raw
<body style="background:&m_backcolor;overflow:hidden;">
<style>
.center-div
{
     position: relative;
     margin: auto;
     top: 0;
     right: 0;
     bottom: 0;
     left: 0;
     width: &m_width.px;
     height: &m_height.px;
}
</style>
<div class="center-div">
<canvas id="&m_id" width="&m_width.px" height="&m_height.px" style="background:&m_backcolor;overflow:hidden;">[No canvas support]</canvas>
</div>
<script>
    window.onload = function ()
    {
	    var data = "&m_data";
	    var tooltips = [];
	    var i;
	    var j;
	    var tips = "&m_tooltips";
	    var labels = "&m_labels";
	    var keylabels = "&m_keylabels";
	    var datasets = [];
	    var colors = "&m_colors";
	    var gradient = &m_gradient;
	    var effects = &m_effects;
	
	 	if (data.indexOf("|") > 0)
		{
			datasets = data.split("|");
			for (i=0; i<datasets.length; ++i)
			{
				datasets[i] = datasets[i].split(",");
				for (j=0; j<datasets[i].length; ++j) datasets[i][j] = parseInt(datasets[i][j]);
			}
		}
		else
		{
			data = data.split(",");
			for (i=0; i<data.length; ++i) data[i] = parseInt(data[i]);
		}
	
	    tips = tips.split(",");
	    for (i=0; i<tips.length; ++i) tooltips.push(tips[i]);	
	
	    labels = labels.split(",");
	   	colors = colors.split(",");
	   	keylabels = keylabels.split(",");
	    
        // To show a stacked or grouped chart each element of the data array should itself
        // be an array containing the data to be shown.
	    var chart;
	
	    if (datasets.length > 0)
	    {
		    chart = new RGraph.HBar('&m_id', datasets);
			//chart.Set('chart.key.position', 'gutter');
			chart.Set('chart.key.position.x', chart.canvas.width - &m_gutterright + 5);
	        chart.Set('chart.key.position.y', &m_guttertop);
	        chart.Set('chart.key.linewidth', 0.001);
	        chart.Set('chart.key.background', 'rgba(0,0,0,0)');
	        chart.Set('chart.key.colors', colors);
	        chart.Set('chart.key', keylabels);
	    }
		else
		{
		    chart = new RGraph.HBar('&m_id', data);
		}    
        
        // Configure the chart to appear as wished.
        chart.Set('chart.labels', labels);
        chart.Set('chart.labels.above', &m_labelsabove);
        chart.Set('chart.margin', &m_margin);
		chart.Set('chart.background.grid.autofit', true);
	   	chart.Set('chart.axis.color', 'gray');
        chart.Set('chart.background.barcolor1', 'white');
        chart.Set('chart.background.barcolor2', 'white');
        chart.Set('chart.background.grid', true);
        chart.Set('chart.colors', ['lightblue']);
       	chart.Set('chart.gutter.left', &m_gutterleft);
    	chart.Set('chart.gutter.right', &m_gutterright);
    	chart.Set('chart.gutter.top', &m_guttertop);
    	chart.Set('chart.gutter.bottom', &m_gutterbottom);
    	chart.Set('chart.shadow', &m_shadow);
    	chart.Set('chart.title', '&m_title');
	   	chart.Set('chart.hmargin', &m_margin);
  
	 	if (datasets.length == 0)
	 	{
		    chart.Set('chart.shadow', &m_shadow);
		    chart.Set('chart.shadow.blur', 15);
		    chart.Set('chart.shadow.offsetx', 0);
		    chart.Set('chart.shadow.offsety', 0);
		    chart.Set('chart.shadow.color', '#aaa');
	    }
	
	    chart.Set('chart.title', '&m_title');
	    if ('&m_titlebackcolor' != '') chart.Set('chart.title.background', '&m_titlebackcolor');
	    chart.Set('chart.title.color', '&m_titleforecolor');
	    
	    if (colors.length > 0)
	    {
		    if (gradient)
		    {
		    	var gcolors = [];
		    	var k;
		    	for (k=0; k<colors.length; ++k) gcolors.push(getGradient(chart, colors[k]));
		    	chart.Set('chart.colors', gcolors);
			}
			else
			{
		    	chart.Set('chart.colors', colors);
			}
	    }
		else if (gradient)
		{
		    myGradient = chart.context.createLinearGradient(0,30,250,30);
			myGradient.addColorStop(0, '&m_gradientstart');
			myGradient.addColorStop(1, '&m_gradientend');
		    chart.Set('chart.colors', [myGradient]);
	    }

	    chart.Set('chart.text.color', '&m_labelforecolor');
	    chart.Set('chart.strokestyle', 'gray');
   
        // Now call the .Draw() method to draw the chart.
		chart.Set('chart.tooltips', tooltips);

		if (effects) RGraph.Effects.Fade.In(chart);
	    else chart.Draw();
	
		// the click_handler will get called when a bar is clicked on
		// if this is running inside a webview then an event is dispatched back into
		// the Lianja runtime
		function click_handler(canvas, text, x, y, idx)
	    {
	        if (typeof(Lianja)=="object")
	        {
		        Lianja.dispatchEvent("&m_delegate", tips[idx]);
		    }
	    }  
	    chart.Set('chart.tooltips.override', click_handler);
	    
	    function getGradient(obj, color)
	    {
	    	var gradient = chart.context.createLinearGradient(0,0,700,50);
		    gradient.addColorStop(0, 'gray');
	        gradient.addColorStop(0.01, color);
		    gradient.addColorStop(1, 'white');
	        return RGraph.isOld() ? color : gradient;
	    }
    }
</script>
endtext
%>
</body>
</html>


