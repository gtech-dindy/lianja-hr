<%@ Language=Recital %>
<html>
<%
private m_libpath
if isPhoneGap()
	m_libpath = "js/library"
elseif isElectron()
	m_libpath = iif(isElectronDebug(), "file:///library", "file:///resources/app.asar/library")
else
	m_libpath = libPath()
endif
? "<head>"
? '<script src="&m_libpath/graphs/RGraph.common.core.js"></script>'
? '<script src="&m_libpath/graphs/RGraph.common.tooltips.js"></script>'
? '<script src="&m_libpath/graphs/RGraph.common.effects.js"></script>'
? '<script src="&m_libpath/graphs/RGraph.common.key.js"></script>'
? '<script src="&m_libpath/graphs/RGraph.bipolar.js"></script>'
? "</head>"
%>
<%
set macros on
//--
// graph_bipolar.rsp?parameter=value&parameter=value...
//
// parameters
//--
private m_width  = getParameter("width", "600") 
private m_height = getParameter("height", "200") 
private m_id     = getParameter("id", "graphCanvas") 
private m_data = getParameter("data", "5,6,8,9,12,13,4,9|5,6,8,9,12,13,4,9") 
private m_labels = getParameter("labels", "Barry,Chris,Yvonne,Dave,Ken,Helen,John,Mike") 
private m_guttertop = getParameter("guttertop", "25") 
private m_gutterbottom = getParameter("gutterbottom", "25") 
private m_gutterleft = getParameter("gutterleft", "50") 
private m_gutterright = getParameter("gutterright", "60") 
private m_shadow  = getParameter("shadow", "false") 
private m_gradient  = getParameter("gradient", "false") 
private m_gradientstart  = getParameter("gradientstart", "white") 
private m_gradientend  = getParameter("gradientend", "lightblue") 
private m_title  = getParameter("title", "Untitled Bipolar Chart") 
private m_titleleft  = getParameter("titleleft", "2010") 
private m_titleright  = getParameter("titleright", "2011") 
private m_titleforecolor  = getParameter("titleforecolor", "gray") 
private m_titlebackcolor  = getParameter("titlebackcolor", "") 
private m_labelsabove  = getParameter("labelsabove", "true") 
private m_margin  = getParameter("margin", "3") 
private m_colors  = getParameter("colors", "") 
private m_labelforecolor  = getParameter("labelforecolor", "gray") 
private m_backcolor  = getParameter("backcolor", "#f7f7f7") 
private m_effects  = getParameter("effects", "false") 

// emit javascript code
text raw
<body style="background:&m_backcolor;overflow:hidden;">
<style>
.center-div
{
     position: relative;
     margin: auto;
     top: 0;
     right: 0;
     bottom: 0;
     left: 0;
     width: &m_width.px;
     height: &m_height.px;
}
</style>
<div class="center-div">
<canvas id="&m_id" width="&m_width.px" height="&m_height.px" style="background:&m_backcolor;overflow:hidden;">[No canvas support]</canvas>
</div>
<script>
    window.onload = function ()
    {
	    var data = "&m_data";
	    var tooltips = [];
	    var i;
	    var tips = "&m_tooltips";
	    var labels = "&m_labels";
	    var colors = "&m_colors";
        var left;
        var right;        
	    var datasets = [];
	    var gradient = &m_gradient;
	    var effects = &m_effects;
	    var myGradient;
	    
	 	if (data.indexOf("|") > 0)
		{
			datasets = data.split("|");
			left = datasets[0].split(",");
			right = datasets[1].split(",");
			for (i=0; i<left.length; ++i) left[i] = parseInt(left[i]);
			for (i=0; i<right.length; ++i) right[i] = parseInt(right[i]);
		}
		else
		{
			return;
		}
	
	    tips = tips.split(",");
	    for (i=0; i<tips.length; ++i) tooltips.push(tips[i]);	
	    labels = labels.split(",");
	   	if (colors.length == 0) colors = [];
	    else colors = colors.split(",");

        // Create the Bi-polar object. Give the constructor the ID of the canvas tag along with
        // the left sides data and the right sides data.
        var chart = new RGraph.Bipolar('&m_id', left, right);
        
        // Configure the Bipolar chart to appear as wished.
        if (colors.length > 0) chart.Set('chart.colors', colors);
        chart.Set('chart.margin', &m_margin);
        chart.Set('chart.labels', labels);
	   	chart.Set('chart.axis.color', 'lightgray');
        chart.Set('chart.title.left', '&m_titleleft');
        chart.Set('chart.title.right', '&m_titleright');
        chart.Set('chart.gutter.left', &m_gutterleft);
    	chart.Set('chart.gutter.right', &m_gutterright);
    	chart.Set('chart.gutter.top', &m_guttertop);
    	chart.Set('chart.gutter.bottom', &m_gutterbottom);
    	chart.Set('chart.shadow', &m_shadow);
    	chart.Set('chart.title', '&m_title');
	    if ('&m_titlebackcolor' != '') chart.Set('chart.title.background', '&m_titlebackcolor');
     	
	    if (colors.length > 0)
	    {
		    if (gradient)
		    {
		    	var gcolors = [];
		    	var k;
		    	for (k=0; k<colors.length; ++k) gcolors.push(getGradient(chart, colors[k]));
		    	chart.Set('chart.colors', gcolors);
			}
			else
			{
		    	chart.Set('chart.colors', colors);
			}
	    }
		else if (gradient)
		{
		    myGradient = chart.context.createLinearGradient(0,30,250,30);
		    myGradient.addColorStop(0, 'gray');
			myGradient.addColorStop(0.0001, '&m_gradientstart');
			myGradient.addColorStop(1, '&m_gradientend');
		    chart.Set('chart.colors', [myGradient]);
	    }
		else
		{
	    	myGradient = chart.context.createLinearGradient(0,0,0,250);
		    myGradient.addColorStop(0, 'gray');
		    myGradient.addColorStop(0.0001, 'white');
			myGradient.addColorStop(1, 'lightblue');
    		chart.Set('chart.colors', [myGradient]);
     	}
	     
 	    chart.Set('chart.title.color', '&m_titleforecolor');
 	    chart.Set('chart.text.color', '&m_labelforecolor');
 
        // Now call the .Draw() method to draw the chart
		if (effects) RGraph.Effects.Fade.In(chart);
	    else chart.Draw();
        
        function getGradient(obj, color)
	    {
	    	var gradient = chart.context.createLinearGradient(0,0,500,50);
		    gradient.addColorStop(0, 'gray');
		    gradient.addColorStop(0.0001, 'white');
	        gradient.addColorStop(1, color);
	        return RGraph.isOld() ? color : gradient;
	    }

    }
</script>
endtext
%>
</body>
</html>
