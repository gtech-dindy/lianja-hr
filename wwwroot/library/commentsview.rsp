<%@ Language=VFP %>
<html>
<head>
<%
///////////////////////////////////////////////////////////////////////////////////////////////////////////
set macros on
set fixed on 
private m_libpath
if isPhoneGap()
	m_libpath = "js/library"
elseif isElectron()
	m_libpath = iif(isElectronDebug(), "file:///library", "file:///resources/app.asar/library")
else
	m_libpath = "../../library/"
endif
? '<link rel="stylesheet" href="&m_libpath/bootstrap-3.3.4/css/bootstrap.min.css">'
? '<script src="&m_libpath/jquery-1.10.2/jquery-1.10.2.min.js" type="text/javascript"></script>'
? '<script src="&m_libpath/bootstrap-3.3.4/js/bootstrap.min.js" type="text/javascript"></script>'
text raw
<script>
var nodecount = 0;
function updateBadges(total)
{
	$( "#totalcomments" ).text("All "+total);
};
function str_replace(needle, replacement, haystack) {
    return haystack.split(needle).join(replacement);
}
</script>
endtext
%>
<style>
.popupmenu { position:relative }
.popupmenu .popupfield {
  	background-color: #269abc;
	color:white;
	font-weight:700;
	border-radius:10px;
}
.popupmenu > span ul.popuplist { 
	display:none;
	position:absolute; left:30px; top:-30px; z-index:999;
	width:300px;
	margin:0; padding:10px; list-style:none;
	background:#fff; color:#333;
	-moz-border-radius:5px; -webkit-border-radius:5px; border-radius:5px;
	-moz-box-shadow:0 0 5px #999; -webkit-box-shadow:0 0 5px #999; box-shadow:0 0 5px #999
}
.popupmenu>span ul.popuplist li {
	padding:10px;
	border-bottom: solid 1px #ccc;
}
.popupmenu>span ul.popuplist li:hover {
	background:#269abc; color:white;
}
.popupmenu>span ul.popuplist li:last-child 
{ 
	border:none 
}
.badge-likes {
  background-color: #f7f7f7;
  color:lightgray;
  border: 1px solid lightgray;
}
.badge-danger {
  background-color: #d43f3a;
}
.badge-warning {
  background-color: #d58512;
}
.badge-success {
  background-color: #398439;
}
.badge-info {
  background-color: #269abc;
}
.badge-inverse {
  background-color: #333333;
}
.imagetext {
	padding:12px;
	padding-top:4px;
	padding-bottom:8px;
	width:30px;
	color:white;
	font-size:20px;
	font-weight:400;
	border-radius:50%;
}
.detailBox {
    width:100%;
    border:1px solid #bbb;
    margin:0px;
    height:100%;
}
.titleBox {
    background-color:#fdfdfd;
    padding:10px;
}
.titleBox label{
  color:#444;
  margin:0;
  display:inline-block;
}
.commentBox {
    padding:10px;
    border-top:1px dotted #bbb;
}
.taskDescription {
    margin-top:10px 0;
}
.commentList {
    padding:0;
    list-style:none;
    margin-top:0px;
    margin-bottom:0px;
}
.commentList li {
    margin:0;
    margin-top:10px;
}
.commentList li > div {
    display:table-cell;
}
.commentli {
	border-top: 1px solid #eaeaea;
}
.commenterImage {
    width:35px;
    margin-right:5px;
    height:100%;
    float:left;
}
.commenterImage img {
    width:100%;
	border-radius:50%;
}
.commentText p {
    margin:0;
}
.commentUser {
    color:#aaa;
    font-family:verdana;
    font-size:13px;
}
.sub-text {
    color:#aaa;
    font-family:verdana;
    font-size:11px;
}
.actionBox {
    padding:0px;
}
.ui-lianja-form {
	position:absolute;
	left:10px;
	right:10px;
	bottom:10px; 
}
.commentsBox {
    border-top:1px dotted #bbb;
	position:absolute;
	top:40px;
	bottom:50px;
	left:0px;
	right:1px;
	overflow: auto;
}
.commentsBox .form-group * {  
    width:100%;
}
.commentDiv {
	height:100%;
	width:100%;
	padding-left:10px;
	padding-right:10px;
}
.commentDivNew {
	height:100%;
	width:100%;
	padding-left:10px;
	padding-right:10px;
}
.commentDivReply {
	height:100%;
	width:100%;
	padding-left:0px;
	padding-right:10px;
}
.commentDivReply .commentDivReply {
	height:100%;
	width:100%;
	padding-left:0px;
	padding-right:10px;
}
.commentDiv .commentDivReply {
	height:100%;
	width:100%;
	padding-left:0px;
	padding-right:10px;
}
.commentDiv .commentDivReply .commentDivReply {
	height:100%;
	width:100%;
	padding-left:0px;
	padding-right:10px;
}
.commentDiv div ul li table tbody tr td div .commentDivReply {
	height:100%;
	width:100%;
	padding-left:10px;
	padding-right:10px;
}
</style>

</head>
<body style="overflow:hidden;">
<%
///////////////////////////////////////////////////////////////////////////////////////////////////////////
set macros on
set fixed on 
//--
// commentsview.rsp?parameter=value&parameter=value...
//
// parameters
//--
private p_database   	= getParameter("database", "southwind")   
private p_table   		= getParameter("table", "comments") 
private p_category   	= getParameter("category", "") 
private p_childkey   	= getParameter("childkey", "childkey") 
private p_caption 		= getParameter("caption", "Comments about {customers.companyname}") 
private p_topic 		= getParameter("topic", "") 
private p_topics 		= getParameter("topics", "") 
private p_username 		= getParameter("username", "admin") 
private p_refreshinterval = getParameter("refreshinterval", "10") 
private m_comments 		= 0
private m_basecaption 
private m_textcolors = array(;
"darkred","darkblue","darkgreen","lightblue","purple","orange","gray","#7E4300","pink","#da9026","#491700","#d10069","lightgreen",;
"darkred","darkblue","darkgreen","lightblue","purple","orange","gray","#7E4300","pink","#da9026","#491700","#d10069","lightgreen";
		)
private atopics = explode(",", p_topics)
private topicslen = alen(atopics)

///////////////////////////////////////////////////////////////////////////////////////////////////////////
function getUserImage(username)
return "user:"+alltrim(username)

function getUserImageColor(username)
	private c = asc(upper(substr(username, 1, 1)))
	c = c - asc('A') + 1
	if (c < 1 or c > 26) 
		return "black"
	endif
return m_textcolors[ c ]
	
proc refreshComments()
	private cnt
	private filter
	
	m_comments = 0
	
	if len(p_database)=0 or len(p_table)=0 or len(p_childkey)=0
		return
	endif
	
	save datasession
	open database &p_database
	use &p_table
	set order to tag childkey
	if len(p_topic)>0 and len(p_childkey)>0 and lower(p_topic)!="all"
		seek "&p_topic.&p_childkey"
		filter = 'topic+childkey="&p_topic.&p_childkey"'
	else
		seek "&p_childkey"
		filter = 'childkey="&p_childkey"'
	endif 
	
	// for each comment...
	do while not eof() and &filter
		if parentnodeid!=0
			skip
			loop
		endif
		emitComment(getComments())
		skip
	enddo
	
	text raw
		<script>
		nodecount = &m_comments;
		//updateBadges(&m_comments);
		</script>
	endtext
	
	restore datasession

	text raw
		<script>
	    $(".commentsBox").animate({ scrollTop: ($(".commentsBox").prop("scrollHeight") - $('.commentsBox').height()) + 20 }, 1000);
		</script>
	endtext	
	
endproc

function getCommentChildren(pnode)
	private tag = tag()
	private recno = recno()
	set order to tag parentnodeid
	seek strzero(pnode,10)
	if not found()
		goto &recno
		set order to &tag
		return .f.
	endif
	do while parentnodeid=pnode and not eof()
		itemobj = object()
		itemObj.imagesrc = getUserImage(username)
		itemObj.text = comment
		itemObj.subtext = strftime("%#c", ttoc(datetime))
		itemObj.depth = depth
		itemObj.id = nodeid
		itemObj.username = username
		itemObj.numlikes = numlikes
		itemObj.topic = topic
		itemObj.recno = nodeid
		commentObj[] = itemObj
		getCommentChildren(nodeid)
		skip
	enddo
	goto &recno
	set order to &tag
return .f.
	
function getComments()
	commentObj = object()
	itemobj = object()
	itemObj.imagesrc = getUserImage(username)
	itemObj.text = comment
	itemObj.subtext = strftime("%#c", ttoc(datetime))
	itemObj.depth = depth
	itemObj.id = nodeid
	itemObj.username = username
	itemObj.numlikes = numlikes
	itemObj.topic = topic
	itemObj.recno = nodeid
	commentObj[] = itemObj
	getCommentChildren(nodeid)
return commentObj

proc emitComment(objlist)
	private m_recno, m_image, m_text, m_subtext, ;
			m_depth, m_id, m_username, m_infotext, m_numlikes, ;
			m_numlikehtml, m_topic, m_nodedepth, m_parentnode, ;
			m_imagetextcolor, m_deletcomment, m_tags, m_tagtext, i, j
	private len = alen(objlist)
    ? '<table width="100%" cellpadding=0" cellspacing="0">'
    ? '<tr>'
    ? '<td>'
    ? '<div class="commentDiv">'
    ? '<div class="actionBox">'
    ? '<ul class="commentList">'

	for i=1 to len
		m_comments = m_comments + 1
		item = objlist[i]
		m_image = item.imagesrc
		m_text = item.text
		m_subtext = item.subtext
		m_nodedepth = item.depth
		m_depth = item.depth * 40
		m_id = item.id
		m_username = item.username
		m_numlikes = item.numlikes
		m_topic = alltrim(item.topic)
		m_recno = item.recno
		if len(m_topic) > 0 
			m_topicClass = "topic_"+lower(m_topic)
		else
			m_topicClass = ""
		endif
		if m_nodedepth = 0
			m_infotext = "commented on this"
		else
			m_infotext = "replied to this"
		endif
		if m_numlikes > 1
			m_numlikehtml = '<span id="nodelike_&m_id" class="badge badge-likes">&m_numlikes people like this</span>'
		elseif m_numlikes = 1
			m_numlikehtml = '<span id="nodelike_&m_id" class="badge badge-likes">1 person likes this</span>'
		else
			m_numlikehtml = '<span id="nodelike_&m_id" class="badge badge-likes"></span>'
		endif
		if m_depth = 0
			m_parentnode = "parentnode"
		else
			m_parentnode = ""
		endif
		text raw
            <li id="node_&m_id" data-depth="&m_nodedepth" style="padding-left:&m_depth.px" class="commentblock &m_topicClass &m_parentnode">
                <div class="commenterImage">
        endtext
        if startsWith(m_image, "user:")
        	m_image = upper(substr(m_image, 6, 1))
	        m_imagetextcolor = getUserImageColor(m_image)
	        ? '<span class="imagetext" style="background-color:&m_imagetextcolor;">&m_image</span>'
        else
        	? '<img src="&m_image" />'
		endif
		if lower(alltrim(p_username))=lower(alltrim(m_username)) or p_username="admin"
			m_removecomment = [<a style="cursor: pointer; cursor: hand;" onclick="removeComment('&m_id', &m_recno)">Remove</a>]
		else
			m_removecomment = ""
		endif
		m_tags = ""
		/*
		if topicslen > 0 and (lower(alltrim(p_username))=lower(alltrim(m_username)) or p_username="admin")
			m_tags = [;
			<div class="popupmenu badge" style="background-color:#269abc;cursor: pointer; cursor: hand;" data-id="&m_id" data-nodeid="&m_recno">;
			<span class="popupfield">Tag<span>;
			<ul class="popuplist">;
			{tags};
			</ul>;
			</div>;
			]
			m_tagtext = "<li>&nbsp;</li>"
			for j=1 to topicslen
				m_tagtext = m_tagtext + "<li>" + atopics[j] + "</li>"
			endfor
			m_tags = str_replace("{tags}", m_tagtext, m_tags)
		endif
		*/
        text raw
                </div>
                <div class="commentText">
                	<p class="commentUser">&m_username &m_infotext &m_numlikehtml</p>
                    <p>&m_text</p> <span class="date sub-text">&m_subtext  <a style="cursor: pointer; cursor: hand;" onclick="likeComment('&m_id', &m_recno)">Like</a>  <a style="cursor: pointer; cursor: hand;" onclick="replyToComment('&m_id')">Reply</a>  &m_removecomment &m_tags</span>
                </div>
            </li>
	    endtext
	endfor

    ? '</ul>'
	? '</div>'
	? '</td>'
    ? '</tr>'
    ? '</table>'

endproc

///////////////////////////////////////////////////////////////////////////////////////////////////////////
private commentObj
private itemObj
private topic
private atopic
private topictext
private lctopictext
private topiccolor
private i
private userimagetextcolor = ""
private userimage = getUserImage(p_username)

if startsWith(userimage, "user:")
	userimage = ""	
	userimagetextcolor = getUserImageColor(p_username)
endif

if len(p_topic) = 0
	p_topic = "All"
endif

if startsWith(p_caption, "Comments ")
	m_basecaption = " comments " + substr(p_caption, 10)
	p_caption = proper(p_topic) + " comments " + substr(p_caption, 10)
else
	m_basecaption = " comments " + p_caption
	p_caption = proper(p_topic) + " comments " + p_caption
endif
	
text raw
<div class="detailBox">
    <div class="titleBox">
      <label id="captiontext">&p_caption</label>
      <div style="float:right;">
endtext
	for i=1 to topicslen
		topic = atopics[i]
		if "@" $ topic
			atopic = explode("@", topic)
			topictext = atopic[1]
			topiccolor = atopic[2]
		else
			topictext = topic
			topiccolor = "#269abc"
		endif
		lctopictext = lower(alltrim(topictext))
      	? [<span id="topicbadge_&lctopictext" class="badge topicbadge" data-topiccolor="&topiccolor" style="background-color:&topiccolor;cursor: pointer; cursor: hand;"  onclick="filterComments('&topictext', 'topicbadge_&lctopictext')">&topictext</span>]
	endfor		
Text raw
      	<span id="totalcomments" class="badge topicbadge" style="background-color:#398439;cursor: pointer; cursor: hand;" onclick="filterComments('All', 'totalcomments')">All Comments</span>
      </div>
    </div>
    <div id="commentscontainer" class="commentsBox">
endtext

refreshComments()

text raw				
</div>
<script>
var currenttopic = "all";
var operation = "add";
var replyto = "";
function replyToComment(id)
{
	operation = "reply";
	replyto = id;
    $( "#inputcomment" ).focus();
};
function removeComment(id, recno)
{
	var node = $("#node_"+id);
	if ($(node).hasClass("parentnode")) 
	{
		node = $(node).parent();
	}
    var result = callController( { operation: "delete", database: "&p_database", username: "&p_username", table: "&p_table", recno: recno } );
	if (result != 0) 
	{
	    var depth = parseInt($(node).data("depth"));
 	    if (depth === 0) 
	    {
	    	node = $(node).remove();
		}
		else
		{
			var nextdepth;
			var nextnode = $(node).next();
			$(node).remove();
			while (typeof nextnode !== 'undefined')
			{
	    		nextdepth = parseInt($(nextnode).data("depth"));
			    if (nextdepth > depth)
			    {
			    	node = nextnode;
				    nextnode = $(node).next();
					$(node).remove();
			    }
				else
				{
					break;
				}
			} 
		}
	}
};
function filterComments(topic, id)
{
	var caption = topic + "&m_basecaption";
	
	$(".topicbadge").css("backgroundColor", "#269abc");
	$("#"+id).css("backgroundColor", "#398439");
	
	$("#captiontext").text(caption);
	
	currenttopic = topic.toLowerCase();
	if (currenttopic === "all") 
	{
		$(".commentblock").show();
		$(".commentblock").css("marginTop", "10px");
	}
	else
	{
		$(".commentblock").hide();
		$(".commentblock").css("marginTop", "0px");
		$(".topic_"+currenttopic).show();
		$(".topic_"+currenttopic).css("marginTop", "10px");
	}
    $(".commentsBox").animate({ scrollTop: $(".commentsBox").prop("scrollHeight") - $('.commentsBox').height() + 10 }, 1000);
};
function likeComment(id, recno)
{
	var node = $("#nodelike_"+id);
    var cnt = callController( { operation: "like", database: "&p_database", username: "&p_username", table: "&p_table", recno: recno } );
	var text;
	if (cnt > 1)
	{
		text = cnt+' people like this';
	}
	else if (cnt = 1)
	{
		text = '1 person likes this';
	}
	else
	{
		text = '';
	}
	$(node).html(text);
	$(node).removeClass("badge-likes");
	$(node).addClass("badge-likes");
};
function postComment(text)
{
	var html = "";
	var dt = new DateTime();
	var subtext = dt.formats.pretty.c;
	var datetext = dt.formats.compound.digits;
	var username = "&p_username";
	var depth = 0;
	var nodedepth = 0;
	var node;
	var parentid = 0;
	var image = "&userimage";
	var imagetextcolor = "&userimagetextcolor"
	
	text = str_replace("'", "&#39;", text);
	text = str_replace('"', "&#34;", text);
	
	image = str_replace("Lianjacloudserverappcenter", "/Lianja/cloudserver/appcenter", image);

    if (operation === "reply")
    {
    	parentid = replyto;
    	node = $("#node_"+replyto);
	    depth = parseInt($(node).data("depth"));
    	nodedepth = 40;	
		depth += 1; 
	    if (depth === 0) 
	    {
	    	node = $(node).parent();
		}
		else
		{
			// need to find last comment
			var nextnode = $(node).next();
			var nextdepth;
			while (typeof nextnode !== 'undefined')
			{
	    		nextdepth = parseInt($(nextnode).data("depth"));
			    if (nextdepth == depth)
			    {
			    	node = nextnode;
				    nodedepth = 0;
				    nextnode = $(node).next();
			    }
				else
				{
					break;
				}
			} 
		}
    }
	
    if (operation === "add")
    {
	    html += '<table width="100%" cellpadding=0" cellspacing="0">';
	    html += '<tr>';
	    html += '<td>';
	    if (operation === "reply")
	    {
	    	html += '<div class="commentDivReply">';
		}
		else
		{
	    	html += '<div class="commentDiv">';
		}
	    html += '<div class="actionBox">';
	    html += '<ul class="commentList">';
	}
	
    html += '<li id="node_{id}" data-depth="' + depth + '" style="padding-left:' + nodedepth + 'px;" class="{2}">';
    html += '<div class="commenterImage">';

    if (imagetextcolor.length > 0)
    {
        html += '<span class="imagetext" style="background-color:&userimagetextcolor;">' + username[0].toUpperCase() + '</span>';
	}
	else
	{
    	html += '<img src="' + image + '" />';
	}
	
    html += '</div>';
    html += '<div class="commentText">';
    if (operation === "add")
    {
    	html += '<p class="commentUser">' + username + ' commented on this <span id="nodelike_{id}" class="badge badge-likes"></span></p>';
	}
	else
	{
    	html += '<p class="commentUser">' + username + ' replied to this <span id="nodelike_{id}" class="badge badge-likes"></span></p>';
	}
    html += '<p>' + text + '</p> <span class="date sub-text">' + subtext + '   <a style="cursor: pointer; cursor: hand;" onclick="likeComment(\'{id}\',{id})">Like</a> <a style="cursor: pointer; cursor: hand;" onclick="replyToComment(\'{id}\')">Reply</a>  <a style="cursor: pointer; cursor: hand;" onclick="removeComment(\'{id}\',{id})">Remove</a></span>';
    html += '</div>';
    html += '</li>';
    
    if (operation === "add")
	{    
	    html += '</ul>';
		html += '</div>';
		html += '</td>';
	    html += '</tr>';
	    html += '</table>';
    }
    
    var id = callController( { operation: operation, database: "&p_database", table: "&p_table", childkey: "&p_childkey", username: username, datetime: datetext, topic: currenttopic, comment: text, category: "&p_category", parentnodeid: parentid, depth: depth } );

	if (typeof id === 'undefined' || id === "0") id = ++nodecount;

	html = str_replace("{id}", id, html);
	if (nodedepth == 0)
	{
		html = str_replace("{2}", "parentnode commentblock topic_"+currenttopic, html);
	}
	else
	{
		html = str_replace("{2}", "commentblock topic_"+currenttopic, html);
	}
	
	html = str_replace("{3}", currenttopic+"_topic", html);
	
    if (operation === "add")
    {
    	$( ".commentsBox" ).append( html );
	    $(".commentsBox").animate({ scrollTop: $(".commentsBox").prop("scrollHeight") - $('.commentsBox').height() + 10 }, 1000);
		//updateBadges(++nodecount);
	}
	else if (operation === "reply")
	{
    	$( node ).append( html );
	}

	operation = "add";  
    $( "#inputcomment" ).blur();
};
function postNewComment()
{
	var text = $("#inputcomment").val().trim();
	if (text.length > 0)
	{
		postComment(text); 
	}
	$("#inputcomment").val("");
};
</script>
<div class="form-inline ui-lianja-form" role="form" >
    <div class="form-group" style="width:100%;">
        <input id="inputcomment" class="form-control" type="text" placeholder="Add a comment..." style="width:100%"/>
    </div>
  </div>
</div>
<script>
$(document).ready(function(){
    $('#inputcomment').on("keyup", function(e){
	    if (e.keyCode === 13) {
	       postNewComment();
	       return false;
	    }
    });
    $('#inputcomment').on("blur", function(e){
    	operation = "add";
    });

	(function($){
		$.fn.createPopupMenu = function() {
			return this.each(function(){
				var obj = $(this);
				obj.find('.popupfield').click(function() { 
					var vis = obj.data("popupvisible");
					if (vis) return;
					obj.data("popupvisible", "true");
					obj.find('.popuplist').fadeIn(400);
				
					$(document).keyup(function(event) { 
						if(event.keyCode == 27) {
							obj.find('.popuplist').fadeOut(400);
							obj.data("popupvisible", "false");
						}
					});
					
					obj.find('.popuplist').hover(function(){ },
						function(){
							$(this).fadeOut(400);
							obj.data("popupvisible", "false");
						});
					});
					
					obj.find('.popuplist li').click(function() { 
						obj.find('.popupfield')
							.val($(this).html())
							.css({
								'background':'#269abc',
								'color':'white'
							});
						obj.find('.popuplist').fadeOut(400);
						obj.data("popupvisible", "false");
					});
			});
		};
	})(jQuery);

	$(function(){
		$('.popupmenu').createPopupMenu();
	});

    // force DOM layout
    setTimeout(function() {}, 0);
});
</script>
endtext

%>
<script>
document.onselectstart = function() { return false; };

function callController(args)
{
	return Lianja.evaluate("comments_controller('" + JSON.stringify(args) + "')");
};

<%
text raw

function DateTime() {
    function getDaySuffix(a) {
        var b = "" + a,
            c = b.length,
            d = parseInt(b.substring(c-2, c-1)),
            e = parseInt(b.substring(c-1));
        if (c == 2 && d == 1) return "th";
        switch(e) {
            case 1:
                return "st";
                break;
            case 2:
                return "nd";
                break;
            case 3:
                return "rd";
                break;
            default:
                return "th";
                break;
        };
    };

    this.getDoY = function(a) {
        var b = new Date(a.getFullYear(),0,1);
    	return Math.ceil((a - b) / 86400000);
    };

    this.date = arguments.length == 0 ? new Date() : new Date(arguments);

    this.weekdays = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');
    this.months = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December');
    this.daySuf = new Array( "st", "nd", "rd", "th" );

    this.day = {
        index: {
            week: "0" + this.date.getDay(),
            month: (this.date.getDate() < 10) ? "0" + this.date.getDate() : this.date.getDate()
        },
        name: this.weekdays[this.date.getDay()],
        of: {
            week: ((this.date.getDay() < 10) ? "0" + this.date.getDay() : this.date.getDay()) + getDaySuffix(this.date.getDay()),
            month: ((this.date.getDate() < 10) ? "0" + this.date.getDate() : this.date.getDate()) + getDaySuffix(this.date.getDate())
        }
    }

    this.month = {
        index: (this.date.getMonth() + 1) < 10 ? "0" + (this.date.getMonth() + 1) : this.date.getMonth() + 1,
        name: this.months[this.date.getMonth()]
    };

    this.year = this.date.getFullYear();

    this.time = {
        hour: {
            meridiem: (this.date.getHours() > 12) ? (this.date.getHours() - 12) < 10 ? "0" + (this.date.getHours() - 12) : this.date.getHours() - 12 : (this.date.getHours() < 10) ? "0" + this.date.getHours() : this.date.getHours(),
            military: (this.date.getHours() < 10) ? "0" + this.date.getHours() : this.date.getHours(),
            noLeadZero: {
                meridiem: (this.date.getHours() > 12) ? this.date.getHours() - 12 : this.date.getHours(),
                military: this.date.getHours()
            }
        },
        minute: (this.date.getMinutes() < 10) ? "0" + this.date.getMinutes() : this.date.getMinutes(),
        seconds: (this.date.getSeconds() < 10) ? "0" + this.date.getSeconds() : this.date.getSeconds(),
        milliseconds: (this.date.getMilliseconds() < 100) ? (this.date.getMilliseconds() < 10) ? "00" + this.date.getMilliseconds() : "0" + this.date.getMilliseconds() : this.date.getMilliseconds(),
        meridiem: (this.date.getHours() > 12) ? "PM" : "AM"
    };

    this.sym = {
        d: {
            d: this.date.getDate(),
            dd: (this.date.getDate() < 10) ? "0" + this.date.getDate() : this.date.getDate(),
            ddd: this.weekdays[this.date.getDay()].substring(0, 3),
            dddd: this.weekdays[this.date.getDay()],
            ddddd: ((this.date.getDate() < 10) ? "0" + this.date.getDate() : this.date.getDate()) + getDaySuffix(this.date.getDate()),
            m: this.date.getMonth() + 1,
            mm: (this.date.getMonth() + 1) < 10 ? "0" + (this.date.getMonth() + 1) : this.date.getMonth() + 1,
            mmm: this.months[this.date.getMonth()].substring(0, 3),
            mmmm: this.months[this.date.getMonth()],
            yy: (""+this.date.getFullYear()).substr(2, 2),
            yyyy: this.date.getFullYear()
        },
        t: {
            h: (this.date.getHours() > 12) ? this.date.getHours() - 12 : this.date.getHours(),
            hh: (this.date.getHours() > 12) ? (this.date.getHours() - 12) < 10 ? "0" + (this.date.getHours() - 12) : this.date.getHours() - 12 : (this.date.getHours() < 10) ? "0" + this.date.getHours() : this.date.getHours(),
            hhh: this.date.getHours(),
            m: this.date.getMinutes(),
            mm: (this.date.getMinutes() < 10) ? "0" + this.date.getMinutes() : this.date.getMinutes(),
            s: this.date.getSeconds(),
            ss: (this.date.getSeconds() < 10) ? "0" + this.date.getSeconds() : this.date.getSeconds(),
            ms: this.date.getMilliseconds(),
            mss: Math.round(this.date.getMilliseconds()/10) < 10 ? "0" + Math.round(this.date.getMilliseconds()/10) : Math.round(this.date.getMilliseconds()/10),
            msss: (this.date.getMilliseconds() < 100) ? (this.date.getMilliseconds() < 10) ? "00" + this.date.getMilliseconds() : "0" + this.date.getMilliseconds() : this.date.getMilliseconds()
        }
    };

    this.formats = {
        compound: {
            commonLogFormat: this.sym.d.dd + "/" + this.sym.d.mmm + "/" + this.sym.d.yyyy + ":" + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            exif: this.sym.d.yyyy + ":" + this.sym.d.mm + ":" + this.sym.d.dd + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            /*iso1: "",
            iso2: "",*/
            mySQL: this.sym.d.yyyy + "-" + this.sym.d.mm + "-" + this.sym.d.dd + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            digits: ""+this.sym.d.yyyy + ""+this.sym.d.mm + ""+this.sym.d.dd + ""+this.sym.t.hh + ""+this.sym.t.mm + ""+this.sym.t.ss,
            postgreSQL1: this.sym.d.yyyy + "." + this.getDoY(this.date),
            postgreSQL2: this.sym.d.yyyy + "" + this.getDoY(this.date),
            soap: this.sym.d.yyyy + "-" + this.sym.d.mm + "-" + this.sym.d.dd + "T" + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss + "." + this.sym.t.mss,
            //unix: "",
            xmlrpc: this.sym.d.yyyy + "" + this.sym.d.mm + "" + this.sym.d.dd + "T" + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            xmlrpcCompact: this.sym.d.yyyy + "" + this.sym.d.mm + "" + this.sym.d.dd + "T" + this.sym.t.hhh + "" + this.sym.t.mm + "" + this.sym.t.ss,
            wddx: this.sym.d.yyyy + "-" + this.sym.d.m + "-" + this.sym.d.d + "T" + this.sym.t.h + ":" + this.sym.t.m + ":" + this.sym.t.s
        },
        constants: {
            atom: this.sym.d.yyyy + "-" + this.sym.d.mm + "-" + this.sym.d.dd + "T" + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            cookie: this.sym.d.dddd + ", " + this.sym.d.dd + "-" + this.sym.d.mmm + "-" + this.sym.d.yy + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            iso8601: this.sym.d.yyyy + "-" + this.sym.d.mm + "-" + this.sym.d.dd + "T" + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            rfc822: this.sym.d.ddd + ", " + this.sym.d.dd + " " + this.sym.d.mmm + " " + this.sym.d.yy + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            rfc850: this.sym.d.dddd + ", " + this.sym.d.dd + "-" + this.sym.d.mmm + "-" + this.sym.d.yy + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            rfc1036: this.sym.d.ddd + ", " + this.sym.d.dd + " " + this.sym.d.mmm + " " + this.sym.d.yy + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            rfc1123: this.sym.d.ddd + ", " + this.sym.d.dd + " " + this.sym.d.mmm + " " + this.sym.d.yyyy + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            rfc2822: this.sym.d.ddd + ", " + this.sym.d.dd + " " + this.sym.d.mmm + " " + this.sym.d.yyyy + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            rfc3339: this.sym.d.yyyy + "-" + this.sym.d.mm + "-" + this.sym.d.dd + "T" + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            rss: this.sym.d.ddd + ", " + this.sym.d.dd + " " + this.sym.d.mmm + " " + this.sym.d.yy + " " + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss,
            w3c: this.sym.d.yyyy + "-" + this.sym.d.mm + "-" + this.sym.d.dd + "T" + this.sym.t.hhh + ":" + this.sym.t.mm + ":" + this.sym.t.ss
        },
        pretty: {
            a: this.sym.t.hh + ":" + this.sym.t.mm + "." + this.sym.t.ss + this.time.meridiem + " " + this.sym.d.dddd + " " + this.sym.d.ddddd + " of " + this.sym.d.mmmm + ", " + this.sym.d.yyyy,
            b: this.sym.t.hh + ":" + this.sym.t.mm + " " + this.sym.d.dddd + " " + this.sym.d.ddddd + " of " + this.sym.d.mmmm + ", " + this.sym.d.yyyy,
            c: this.sym.d.dddd + " " + this.sym.d.mmmm + " " + this.sym.d.dd + ", " + this.sym.d.yyyy + " " + this.sym.t.hh + ":" + this.sym.t.mm + ":" + this.sym.t.ss
        }
    };
};
endtext
%>

</script>

</body>
</html>
